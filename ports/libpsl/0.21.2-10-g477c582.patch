--- a/fuzz/meson.build
+++ b/fuzz/meson.build
@@ -15,6 +15,7 @@ foreach test_case : ['fuzzer', 'load_fuzzer', 'load_dafsa_fuzzer']
   endif
   source_file = 'libpsl_@0@.c'.format(test_case)
   exe = executable(test_name, source_file, 'main.c',
+    build_by_default: false,
     c_args : fuzzer_cargs,
     include_directories : configinc,
     link_language : link_language,
--- a/meson.build
+++ b/meson.build
@@ -40,17 +40,9 @@ if ['libidn2', 'auto'].contains(enable_runtime)
 endif
 
 if ['libicu', 'auto'].contains(enable_runtime)
-  libicu_dep = dependency('icu-uc', required : false)
-  if not libicu_dep.found() and cc.has_header('unicode/ustring.h')
-    # MSVC: the debug configuration of ICU generated the libraries with d suffix
-    # we must handle this and search for the right library depending on the
-    # build type. Note debugoptimized is just a release build with .pdb files enabled
-    if cc.get_id() == 'msvc' and buildtype == 'debug'
-      libicu_dep = cc.find_library('icuucd', required : false)
-    else
-      libicu_dep = cc.find_library('icuuc', required : false)
-    endif
-  endif
+  libicu_dep = dependency('icu-uc', 'ICU',
+                          components: 'uc',
+                          required : false)
   if libicu_dep.found()
     if enable_runtime == 'auto'
       enable_runtime = 'libicu'
@@ -108,6 +100,9 @@ config.set('HAVE_STRNDUP', cc.has_function('strndup'))
 config.set('HAVE_CLOCK_GETTIME', cc.has_function('clock_gettime'))
 config.set('HAVE_FMEMOPEN', cc.has_function('fmemopen'))
 config.set('HAVE_NL_LANGINFO', cc.has_function('nl_langinfo'))
+if cc.has_function_attribute('visibility')
+  config.set('HAVE_VISIBILITY', 1)
+endif
 configure_file(output : 'config.h', configuration : config)
 
 configinc = include_directories('.')
@@ -140,6 +135,8 @@ endif
 subdir('include')
 subdir('src')
 subdir('tools')
-subdir('tests')
-subdir('fuzz')
+if get_option('tests')
+  subdir('tests')
+  subdir('fuzz')
+endif
 subdir(join_paths('docs', 'libpsl'))
--- a/meson_options.txt
+++ b/meson_options.txt
@@ -17,3 +17,6 @@ option('psl_testfile', type : 'string', value : '',
 
 option('docs', type: 'boolean', value: false,
   description: 'Build the API reference (requires gtk-doc)')
+
+option('tests', type: 'boolean', value: true,
+  description: 'Build the tests and fuzzers')
--- a/src/meson.build
+++ b/src/meson.build
@@ -38,6 +38,7 @@ libpsl = library('psl', sources, suffixes_dafsa_h,
   include_directories : [configinc, includedir],
   c_args : cargs,
   dependencies : [libidn2_dep, libidn_dep, libicu_dep, libunistring, networking_deps, libiconv_dep],
+  gnu_symbol_visibility: 'hidden',
   version: library_version,
   install: true,
   link_language : link_language
--- a/tests/meson.build
+++ b/tests/meson.build
@@ -1,11 +1,13 @@
 psl_dafsa = custom_target('psl.dafsa',
   input : psl_file,
   output : 'psl.dafsa',
+  build_by_default: false,
   command : [python, psl_make_dafsa, '--output-format=binary', '@INPUT@', '@OUTPUT@'])
 
 psl_ascii_dafsa = custom_target('psl_ascii.dafsa',
   input : psl_file,
   output : 'psl_ascii.dafsa',
+  build_by_default: false,
   command : [python, psl_make_dafsa, '--output-format=binary', '--encoding=ascii', '@INPUT@', '@OUTPUT@'])
 
 tests_cargs = [
@@ -30,6 +32,7 @@ endif
 foreach test_name : tests
   source = test_name + '.c'
   exe = executable(test_name, source,
+    build_by_default: false,
     c_args : tests_cargs,
     link_with : libpsl,
     include_directories : configinc,
--- a/tools/psl.c
+++ b/tools/psl.c
@@ -38,6 +38,14 @@
 
 #ifdef _WIN32
 # include <winsock2.h> // WSAStartup, WSACleanup
+
+// Windows does not have localtime_r but has localtime_s, which is more or less
+// the same except that the arguments are reversed
+# define LOCALTIME_R_SUCCESSFUL(t_sec,t_now)	\
+	(localtime_s(t_now, t_sec) == 0)
+#else
+# define LOCALTIME_R_SUCCESSFUL(t_sec,t_now)	\
+	(localtime_r(t_sec, t_now) != NULL)
 #endif
 
 #include <stdlib.h>
@@ -90,7 +98,7 @@ static const char *time2str(time_t t)
 	static char buf[64];
 	struct tm tm;
 
-	if (localtime_r(&t, &tm) != NULL)
+	if (LOCALTIME_R_SUCCESSFUL(&t, &tm))
 		strftime(buf, sizeof(buf), "%a, %d %b %Y %H:%M:%S %Z", &tm);
 	else
 		strcpy(buf, "--notime--");
